{
    "1": {
        "Name": "Consumer Goods",
        "Description": "Mock E-commerce site.\n \nUsers can browse, filter, and search products, and edit the contents of their cart.",
        "Tech": "/react.svg, /file-type-css.svg, /javascript-js.svg",
        "Images": {
            "keyword": "cart",
            "urls": "/shopping-cart-1.png, /shopping-cart-2.png"
        },
        "date": "Sep 2023",
        "details": {
            "1": {
                "img": "../../shopping-cart-3.png",
                "copy":  "Mock E-commerce site.\n \nUsers can search, browse and filter products, and edit the contents of a viewable cart, which can be accessed from any page."
            },
            "2": {
                "img": "../../shopping-cart-2.png"
            },
            "3": {
                "img": "../../shopping-cart-1.png"
            },
            "4": {
                "copy": "To avoid prop drilling, useContext was used to manage a global 'cart' object that can be edited from multiple locations."
            },
            "5": {
                    "code": "import CartContext from './CartContext';\nimport { useEffect, useState } from 'react';\n\nfunction CartProvider({ children }) {\n  const [cartArray, setCartArray] = useState([]);\n\n  const addToCart = (product, quant = null) => {\n    if (quant === 0) {\n      const updatedCartArray = cartArray.filter(\n        (item) => item.id !== product.id\n      );\n      setCartArray(updatedCartArray);\n    } else {\n      const index = cartArray.findIndex((item) => item.id === product.id);\n\n      if (index !== -1) {\n        // If the product already exists, update the quantity\n        const updatedCartArray = [...cartArray];\n        updatedCartArray[index] = {\n          ...updatedCartArray[index],\n          quantity: quant,\n        };\n        setCartArray(updatedCartArray);\n      } else {\n        // If the product doesn't exist, add it to the cartArray with quantity\n        setCartArray((prevCart) => [\n          ...prevCart,\n          { ...product, quantity: quant }, // Include quantity directly in the object\n        ]);\n      };\n\n  return (\n    <CartContext.Provider value={{ cartArray, addToCart }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport default CartProvider;",
                    "title": "CartProvider.jsx:\n defines methods to be called from other components."
            },
            "6": {
                "code": "onClick={() => addToCart(data, userQuantitySelection)}",
                "title": "addToCart method called from a component, with the logic handled by the CartProvider."
            },
            "7": {
                "website": "https://jamescrutchley.github.io/Shopping-Cart",
                "github": "https://github.com/jamescrutchley/Shopping-Cart"
            }
        }
    },
    "2": {
        "Name": "Battleship",
        "Description": "A player vs bot implementation of the classic two player strategy game. \nBuilt with Vanilla JS & Webpack.        ",
        "Tech": "/react.svg, /file-type-css.svg, /javascript-js.svg",
        "Images": {
            "keyword": "battleship",
            "urls": "/battleship.png"
        },
        "date": "July 2023",
        "details": {
            "1": {
                "copy":  "A vanilla JS implementation of the popular board game ‘Battleship’."
            },
            "2": {
                "img": "../../battleship.png"
            },
            "3": {
                "copy": "The logic of the game is built around a handful of simple objects: Ship, Gameboard, Player, and so on. The player and the bot both receive a 'Gameboard' which are able to receive attacks, place ships, and report on their current status. Gameplay proceeds via a loop in which methods are called when appropriate."
            },
            "4": {
                "copy": "The main rationale behind this project was hands-on experience in Test Driven Development (specifically the ‘red - green - refactor’ approach). Using the Jest testing framework, tests were set up for the key game functionalities, and these tests then informed the development process."
            },
            "5": {
                "title": "A test describing the 'autoplace method'. When the bot places two ships of size 2 and 5, respectively, 7 'spaces' on the bot's grid should be subsequently occupied.",
                "code": "describe.only('autoPlace method', () => {\n    let bot = player()\n    test('correctly updates board', () => {\n        let tanker = createShip(5);\n        let recon = createShip(2);\n    \n        bot.autoPlace(tanker, recon);\n        expect(bot.ownBoard.grid.filter(space => space.occupied)).toHaveLength(7)\n    })\n})\n"
            },
            "6": {
                "website": "https://jamescrutchley.github.io/battleship",
                "github": "https://github.com/jamescrutchley/battleship"
            }
        }
    },
    "3": {
        "Name": "Knight's Travails",
        "Description": "A variation on the classic 'Knight's Tour' chess problem.\n Given any start and end point, the algorithm finds the shortest path.        ",
        "Tech": "/file-type-css.svg, /javascript-js.svg",
        "Images": {
            "keyword": "knight",
            "urls": "/knights.png"
        },
        "date": "2023",
        "details": {
            "1": {
                "copy":  "Knight's Travails was part of a larger course on basic algorithms, and provided hands-on experience thinking in terms of algorithms/data structures."
            },
            "2": {
                "img": "../../knights.png"
            },
            "3": {
                "copy": "Originally just a JS script, I added a visual and interactive element. Under the hood, the chess board is represented by a ‘Graph’ class. A ‘travail’ method on the graph class is called when the user selects an initial and destination position for the knight, which performs a breadth-first search to find the shortest possible path to the destination."
            },
            "4": {
                "title": "Function which returns an instance of the Graph class with a specified size. While chessboards are 8x8, an arbitrarily large board can be constructed.",
                "code": "function buildGraph(size) {\n  let noVertices = size ** 2;\n  let myGraph = new Graph(noVertices);\n  for (i = 0; i < noVertices; i++) {\n    myGraph.addVertex(i);\n  }\n  for (j = 0; j < noVertices; j++) {\n    let coord = vertexToCoordinate(j, size);\n\n    // feed addEdge coords.\n    for (vertex of generateEdges(coord, size)) {\n      myGraph.addEdge(j, vertex);\n    }\n  }\n  return myGraph;\n}"
            },
            "5": {
                "copy": "I found this project rewarding as, although it involved a fairly simple problem, it nonetheless forced me to think through the solution and how to implement it carefully and deliberately."
            },
            "6": {
                "website": "https://jamescrutchley.github.io/KnightsTravails",
                "github": "https://github.com/jamescrutchley/KnightsTravails"
            }
        }
    },
    "4": {
        "Name": "Game of Life",
        "Description": "A simple implementation of Conway's Game of Life, built with React.",
        "Tech": "/file-type-css.svg, /javascript-js.svg",
        "Images": {
            "keyword": "game",
            "urls": "/game-2.png, /game-3.png, /game-4.png"
        },
        "date": "2022",
        "details": {
            "1": {
                "copy":  "An early foray into React. The game itself is simple: Cellular 'life' propagates on a 2D grid according to a handful of simple rules. These rules determine the evolution of life on the grid over time."
            },
            "2": {
                "img": "../../game.png"
            },
            "3": {
                "title": "The game's logic is largely contained within a 'Game' component with a 'grid' state, capturing the current configuration of cellular life. User interaction is also managed via the states shown below:",
                "code": "const [grid, setGrid] = useState(initialGrid);\nconst [genCount, setGenCount] = useState(0);\nconst [isActive, setIsActive] = useState(false);\nconst [gameSpeed, setGameSpeed] = useState(100);"
            },
            "4": {
                "copy": "An early project, there is much here I would do differently today: Split up components, abstract away hardcoded logic, focus on mobile-first/responsive design, and so forth."
            },
            "5": {
                "website": "https://jamescrutchley.github.io/game-of-life/",
                "github": "https://github.com/jamescrutchley/game-of-life"
            }
        }
    },
    "5": {
        "Name": "React Design Patterns",
        "date": "",
        "Description": "A series of common React design patterns with notated code and toy examples",
        "Tech": "/react.svg, /file-type-css.svg, /typescript-icon.svg",
        "Images": {
            "keyword": "design",
            "urls": "/construction-site.svg"
        }
    }
}
